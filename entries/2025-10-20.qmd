---
title: "2025-10-20"
format:
  html: default
  pdf: default
params:
  course: "mc451"
  word_min: 250
  word_max: 300
  p1: 'Think of a headline or news story you’ve seen that claims one thing causes another (e.g., "Teens who use social media are more likely to be depressed"). Based on what you''ve learned in this chapter, explain why this claim may or may not be valid. What type of research design would be necessary to make such a claim confidently?'
  p2: 'Choose a communication-related research question you’re interested in (e.g., “Does political meme exposure influence voting confidence?”). Then briefly describe how you might set up a simple experiment to test that question. What would you manipulate? What would you measure? How would random assignment help strengthen your conclusions?'
  p3: 'Experiments often require researchers to deceive participants or control aspects of their environment. Reflect on how you feel about that. Do you think the benefits of experimental knowledge are worth these trade-offs? What would be essential to include in your debrief if you had to deceive participants in your study?'
---

## Choose **one** prompt to answer

> **Prompt B:** `r params$p2`

---

## Response

<!-- RESPONSE-START -->
We have discussed this a little bit in class, but does a politician having a humorous social media presence help them with young voters? To test this question, I would create an online experiment where participants are tasked with viewing two fake politicians’ Instagram accounts. Both post about the same political issues and policies, but one uses Reels with trending audios and humorous captions, while the other maintains a more traditional and serious tone. The manipulated variable in this experiment is the politician’s social media tone. After viewing the posts, participants would complete a short survey measuring each politician’s likability, trustworthiness and voting appeal. EX: “I find this candidate relatable,” “I would consider voting for this candidate” and “I trust this politician’s judgment,” rated on a 1–5 scale. Higher scores would indicate a more positive perception of the candidate. What would be measured are the participants’ overall attitudes toward the candidates and their willingness to support them as the goal is to see if the more humorous candidate is rated as more likable and relatable among younger people, potentially increasing voting appeal. Random assignment may actually have some positive and negative impacts. Unless the experiment includes politicians from different parties to cater to the different political preferences, people may be led by their bias instead of focusing on the topic at hand. Otherwise, it’s helpful to show whether the politician’s tone, not the participant’s existing opinions, is what actually causes the difference in perception.
<!-- RESPONSE-END -->

---

## Word Count & Range Check

```{r}
#| echo: false
#| message: false
#| warning: false
get_response_text <- function() {
  f <- knitr::current_input()
  if (is.null(f) || !file.exists(f)) return("")
  x <- readLines(f, warn = FALSE)
  # Find the lines that EXACTLY match the start/end markers
  s <- grep("^<!-- RESPONSE-START -->$", x)
  e <- grep("^<!-- RESPONSE-END -->$", x)
  if (length(s) != 1 || length(e) != 1 || e <= s) return("")
  paste(x[(s + 1L):(e - 1L)], collapse = "\n")
}
count_words <- function(txt) {
  # Remove code blocks and inline code before counting
  txt <- gsub("```[\\s\\S]*?```", " ", txt, perl = TRUE)
  txt <- gsub("`[^`]*`", " ", txt, perl = TRUE)
  # Keep letters, numbers, spaces, hyphens, and apostrophes
  txt <- gsub("[^\\p{L}\\p{N}\\s'-]", " ", txt, perl = TRUE)
  # Split by whitespace and count non-empty words
  words <- unlist(strsplit(txt, "\\s+", perl = TRUE))
  words <- words[nzchar(words)]
  length(words)
}
txt <- get_response_text()
n <- count_words(txt)
minw <- as.integer(params$word_min)
maxw <- as.integer(params$word_max)
in_range <- n >= minw && n <= maxw
cat(sprintf("**Word count:** %d  \n", n))
cat(sprintf("**Required range (%s):** %d–%d words  \n",
            toupper(params$course), minw, maxw))
cat(if (in_range) "**Status:** ✅ In range\n" else "**Status:** ❌ Out of range\n")
```
